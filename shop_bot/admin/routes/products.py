from flask import current_app, render_template, request, redirect, url_for
from werkzeug.utils import secure_filename
from sqlalchemy.exc import SQLAlchemyError, DataError
from sqlalchemy import select
from sqlalchemy.orm import selectinload
import os
import logging

from db.models import Product, Category
from db.init import sync_session
from exceptions.db.products import NegativeProductPriceError, NegativeProductQuantityError
from . import routes_bp

logger = logging.getLogger(__name__)

@routes_bp.route('/products/')
def product_list():
    logger.info('üîé –ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.')
    with sync_session() as session:
        stmt = select(Category).order_by(Category.name).options(selectinload(Category.products))
        categories = session.scalars(stmt).all()
    logger.debug(f'üì¶ –ü–æ–ª—É—á–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π.')
    return render_template('products.html', categories=categories)

@routes_bp.route('/products/add/', methods=['GET', 'POST'])
def add_product():
    logger.info('‚û°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞.')
    with sync_session() as session:
        if request.method == 'POST':
            logger.debug('üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞.')
            form = request.form
            file = request.files.get('image')
            file_path = ''
            if file and file.filename != '':
                file_name = secure_filename(file.filename)
                file_path = os.path.join('products/', file_name)
                MEDIA_FOLDER_PATH = current_app.config.get('MEDIA_FOLDER_PATH')
                full_path = os.path.join(MEDIA_FOLDER_PATH, 'products', file_name)
                file.save(full_path)
                logger.info(f'üñºÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file_name}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {full_path}')
            try:
                name = form['name'].strip()
                price = int(form['price'])
                category_id = int(form['category'])
                quantity_in_stock = int(form['quantity_in_stock'])

                if not name:
                    logger.warning('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –±–µ–∑ –∏–º–µ–Ω–∏.')
                    raise ValueError('–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')

                if price < 0:
                    logger.warning(f'‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price}')
                    raise NegativeProductPriceError(price)
                
                if quantity_in_stock < 0:
                    logger.warning(f'‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity_in_stock}')
                    raise NegativeProductQuantityError(quantity_in_stock)
                
                category = session.query(Category).filter_by(id=category_id).first()
                if not category:
                    logger.warning(f'‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
                    return f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', 400
                
                product = Product(name=name, 
                                  price=price, 
                                  category_id=category_id, 
                                  quantity_in_stock=quantity_in_stock,
                                  image=file_path
                                  )
                session.add(product)
                session.commit()
                logger.info(f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç: {product.name} (ID: {product.id})')

            except DataError as e:
                session.rollback()
                logger.error(f'‚ùå –û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –≤—ã—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: {e}', exc_info=True)
                return f'–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –≤—ã—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: {e}', 400
            except SQLAlchemyError as e:
                session.rollback()
                logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}', exc_info=True)
                return f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞', 400
            except Exception as e:
                return f'{e}', 400
            
            return redirect(url_for('admin.product_list'))
        
        logger.debug('üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ ‚Äî –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞.')
        categories = session.query(Category).all()
        return render_template('add_product.html', categories=categories)