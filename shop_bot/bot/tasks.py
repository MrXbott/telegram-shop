from aiogram import Bot
import logging

from bot.celery_app import celery_app
from db.models import Order, OrderItem, OrderStatus
from bot.keyboards import user_kb as kb
from config import BOT_TOKEN, POSTGRES_URL

logger = logging.getLogger(__name__)

@celery_app.task
def cancel_unpaid_order(user_id: int, order_id: int):
    import asyncio

    async def cancel_order():
        from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
        from sqlalchemy.ext.asyncio import AsyncSession
        from sqlalchemy.orm import selectinload
        from sqlalchemy import select, update

        logger.info(f'üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞: user_id={user_id}, order_id={order_id}')

        async_engine = create_async_engine(POSTGRES_URL, echo=False)
        async_session_maker = async_sessionmaker(async_engine, class_=AsyncSession, expire_on_commit=False)

        bot = Bot(token=BOT_TOKEN)
        try:
            async with async_session_maker() as session:
                # to do: –ª–æ–≤–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω
                result = await session.execute(
                            select(Order)
                            .where(Order.user_id==user_id, Order.id==order_id)
                            .options(selectinload(Order.items).selectinload(OrderItem.product))
                            )
                order =  result.scalar_one() 
                logger.info(f'üì¶ –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑: id={order.id}, —Å—Ç–∞—Ç—É—Å={order.status_id}')

                # to do: –ª–æ–≤–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
                result = await session.execute(select(OrderStatus).filter(OrderStatus.status == 'waiting_for_payment'))
                waiting_for_payment_status = result.scalar_one()
                logger.info(f'üì¶ –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ç—É—Å waiting_for_payment: id={waiting_for_payment_status.id}')

                result = await session.execute(select(OrderStatus).filter(OrderStatus.status == 'cancelled'))
                cancelled_status = result.scalar_one()
                logger.info(f'üì¶ –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ç—É—Å cancelled: id={cancelled_status.id}')

                if order.status_id == waiting_for_payment_status.id:
                    await session.execute(update(Order).where(Order.id == order_id).values(status_id=cancelled_status.id))
                    await session.commit()
                    logger.info(f'‚ÑπÔ∏è –ó–∞–∫–∞–∑ ‚Ññ{order.id} –æ—Ç–º–µ–Ω–µ–Ω: –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å = {cancelled_status.status}, id = {cancelled_status.id}')

                    await session.refresh(order)

                    for item in order.items:
                        item.product.quantity_in_stock += item.quantity

                    await session.commit()
                    logger.info(f'‚úÖ‚ùå –ó–∞–∫–∞–∑ ‚Ññ{order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω –∏ —Ç–æ–≤–∞—Ä—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥.')

                    await bot.send_message(user_id, f'‚ùå –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω—ë–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–ø–ª–∞—Ç—ã.', reply_markup=kb.main_keyboard())
                else:
                    logger.info(f'‚ÑπÔ∏è –ó–∞–∫–∞–∑ {order.id} –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã. –ü—Ä–æ–ø—É—Å–∫.')
        except Exception as e:
            logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}: {e}')
        finally:
            await bot.session.close()

    asyncio.run(cancel_order())