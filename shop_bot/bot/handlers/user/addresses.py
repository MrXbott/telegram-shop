from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
import logging

import keyboards.addresses as kb
from db import crud
from db.models import Address
from utils.validators import is_valid_address
from utils.decorators import handle_db_errors


logger = logging.getLogger(__name__)
router = Router()

class AddNewAddress(StatesGroup):
    waiting_for_address = State()

@router.message(F.text.in_(['/addresses', 'üè† –ú–æ–∏ –∞–¥—Ä–µ—Å–∞']))
async def show_addresses(message: Message, session: AsyncSession):
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /addresses')
    
    user_id = message.from_user.id
    addresses = await crud.get_user_addresses(session, user_id)
    if not addresses:
        await message.answer('–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏. –ü–æ–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ—Ç.')
        return
    await message.answer(text='–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=kb.address_list_keyboard(addresses))

@router.callback_query(F.data == 'new_address')
async def add_new_address(callback: CallbackQuery, state: FSMContext):
    logger.info(f'üè† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å.')
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å: —É–ª–∏—Ü–∞, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, –∫–≤–∞—Ä—Ç–∏—Ä–∞ –∏ —ç—Ç–∞–∂')
    await state.set_state(AddNewAddress.waiting_for_address)

@router.message(AddNewAddress.waiting_for_address)
@handle_db_errors()
async def save_new_address(message: Message, state: FSMContext, session: AsyncSession):
    address = message.text.strip()
    if not is_valid_address(address):
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–¥—Ä–µ—Å–∞. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.')
        logger.warning(f'‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å: {message.text}.')
        return
    
    logger.info(f'‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∞–¥—Ä–µ—Å: {address}.')
    await state.update_data(address=address)
    
    data = await state.get_data()
    user_id = message.from_user.id
    try:
        new_address: Address = await crud.add_new_address(session, user_id, data.get('address'))
        await state.clear()
        await message.answer(f'‚úÖ –í–∞—à –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω: {new_address.address}')
        logger.info(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –∞–¥—Ä–µ—Å —Å id {new_address.id}')
    except Exception as e:
        logger.error(f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: {e}', exc_info=True)
