from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.exceptions import TelegramBadRequest
from typing import List
import logging

import bot.keyboards.user_kb as kb
from bot.keyboards.addresses import choosing_address_keyboard
from db import crud, cart
from db.cart import ProductInCart
from utils.decorators import handle_db_errors
from utils.validators import is_valid_phone, normalize_phone, is_valid_name, is_valid_address
from bot.texts import order_text
from exceptions.db.products import ProductOutOfStockError
from bot.services.invoices import send_order_invoice
from bot.tasks import cancel_unpaid_order
from config import PROVIDER_TOKEN, UNPAID_ORDER_TIMEOUT
from exceptions.db.orders import OrderNotFound
from bot.services.exchange import ExchangeRateService, validate_payment_amount
from exceptions.bot.payments import TelegramPaymentLimitError

logger = logging.getLogger(__name__)
router = Router()
exchange_service = ExchangeRateService()


class PlaceAnOrder(StatesGroup):
    choosing_address = State()
    waiting_for_address_id = State()
    waiting_for_address_text = State()
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_confirmation = State()


@router.callback_query(F.data == 'details_for_order')
async def add_order_details(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    products: List[ProductInCart] = await cart.get_cart(user_id)
    total_sum = 0
    for product in products:
        total_sum += product.quantity * product.product.price
    currency_code = 'USD'
    rate: float = await exchange_service.get_exchange_rate(currency_code)
    payment_amount: int = total_sum * 100
    try:
        validate_payment_amount(payment_amount, currency_code, rate)
    except TelegramPaymentLimitError as e:
        logger.error(f'‚ùå {str(e)}', exc_info=True)
        await callback.message.answer(f'‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑: –º–∏–Ω. —Å—É–º–º–∞ {e.min_amount} - –º–∞–∫—Å. —Å—É–º–º–∞ {e.max_amount}')
        return
    
    addresses = await crud.get_user_addresses(user_id)
    logger.info(f'üì¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑.')
    if addresses:
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π:', reply_markup=choosing_address_keyboard(addresses))
        await state.set_state(PlaceAnOrder.choosing_address)
    else:
        await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: \n–£–ª–∏—Ü—É, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ —ç—Ç–∞–∂:')
        await state.set_state(PlaceAnOrder.waiting_for_address_text)


@router.callback_query(F.data.startswith('use_address_'), PlaceAnOrder.choosing_address)
async def use_saved_address(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    address_id = int(callback.data.split('_')[-1])
    address = await crud.get_address(user_id, address_id)
    
    if not address or address.is_deleted:
        await callback.message.answer('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return
    
    await state.update_data(address_id=address.id)
    await callback.message.edit_text(f'–í—ã —É–∫–∞–∑–∞–ª–∏ –∞–¥—Ä–µ—Å: <b>{address.address}</b>')
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:', reply_markup=kb.order_name_keyboard())
    await state.set_state(PlaceAnOrder.waiting_for_name)

@router.callback_query(F.data == 'enter_new_address', PlaceAnOrder.choosing_address)
async def enter_new_address(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: \n–£–ª–∏—Ü—É, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ —ç—Ç–∞–∂:')
    await state.set_state(PlaceAnOrder.waiting_for_address_text)

@router.message(PlaceAnOrder.waiting_for_address_text)
async def add_order_address(message: Message, state: FSMContext):
    address = message.text.strip()
    if not is_valid_address(address):
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–¥—Ä–µ—Å–∞. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.')
        logger.warning(f'‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å: {message.text}.')
        return
    
    logger.info(f'‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∞–¥—Ä–µ—Å: {message.text}.')
    await state.update_data(address_text=address)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:', reply_markup=kb.order_name_keyboard())
    await state.set_state(PlaceAnOrder.waiting_for_name)

@router.message(PlaceAnOrder.waiting_for_name, F.text == 'üë§ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è')
async def handle_user_name(message: Message, state: FSMContext):
    name = message.from_user.full_name
    await state.update_data(name=name)
    await message.answer(f'–í–∞—à–µ –∏–º—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: <b>{name}</b>')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', reply_markup=kb.order_phone_keyboard())
    await state.set_state(PlaceAnOrder.waiting_for_phone)

@router.message(PlaceAnOrder.waiting_for_name)
async def add_order_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not is_valid_name(name):
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.')
        logger.warning(f'‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è: {message.text}.')
        return
    
    logger.info(f'‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∏–º—è: {message.text}.')
    await state.update_data(name=name)
    await message.answer(f'–í–∞—à–µ –∏–º—è: <b>{name}</b>')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', reply_markup=kb.order_phone_keyboard())
    await state.set_state(PlaceAnOrder.waiting_for_phone)

@router.message(PlaceAnOrder.waiting_for_phone, F.contact)
async def handle_contact(message: Message, state: FSMContext):
    phone = message.contact.phone_number
    await state.update_data(phone=normalize_phone(phone))
    logger.info(f'‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}.')
    await show_order_details(message, state)

@router.message(PlaceAnOrder.waiting_for_phone, F.text)
async def add_order_phone(message: Message, state: FSMContext):
    user_id = message.from_user.id
    phone = message.text.strip()  

    if not is_valid_phone(phone):
        await message.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX')
        logger.warning(f'‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message.text}.')
        return
    
    await state.update_data(phone=normalize_phone(phone))
    logger.info(f'‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω: {message.text}.')
    await message.answer(f'–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{phone}</b>', reply_markup=ReplyKeyboardRemove())
    await show_order_details(message, state)

async def show_order_details(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    address_id = data.get('address_id')
    address_text = data.get('address_text')
    
    address = None
    if address_id:
        address = await crud.get_address(user_id, address_id)
    text = (
        f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n'
        f'üìç –ê–¥—Ä–µ—Å: <b>{address.address if address else address_text}</b>\n'
        f'üë§ –ò–º—è: <b>{data['name']}</b>\n'
        f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>{data['phone']}</b>\n\n'
    )
    await message.answer(text, reply_markup=kb.confirm_order_details_keyboard())
    await state.set_state(PlaceAnOrder.waiting_for_confirmation)


@router.callback_query(F.data == 'confirm_order_and_pay')
@handle_db_errors()
async def place_an_order(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    # to do: check data 
    data = await state.get_data()

    products: List[ProductInCart] = await cart.get_cart(user_id)
    if not products:
        await callback.answer('‚ö†Ô∏èüõí –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑: –≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
        return

    try:
        order = await crud.create_order(user_id, data)
        await crud.update_order_status(user_id, order.id, 'waiting_for_payment')

        cancel_unpaid_order.apply_async(args=[user_id, order.id], countdown=UNPAID_ORDER_TIMEOUT)

        await cart.clear_cart(user_id)

        await send_order_invoice(callback.bot, callback.message.chat.id, order, PROVIDER_TOKEN)
        
        await state.clear()
        await callback.message.delete_reply_markup()

        logger.info(f'‚úÖüì¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∞–∑ ‚Ññ{order.id} –∏ –ø–æ–ª—É—á–∏–ª —Å—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É.')

    except ProductOutOfStockError as e:
        await callback.message.answer('‚ö†Ô∏è–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', reply_markup=kb.main_keyboard())
        logger.error(f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑: {e}', exc_info=True)
    except TelegramBadRequest as e:
        await callback.message.answer(f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: <b>{order.id}</b>', reply_markup=kb.main_keyboard())
        logger.error(f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.: {e}', exc_info=True)
    except Exception as e:
        await callback.message.answer(f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=kb.main_keyboard())
        logger.error(f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}', exc_info=True)


@router.callback_query(F.data.startswith('order_'))
@handle_db_errors()
async def show_order(callback: CallbackQuery):
    user_id = callback.from_user.id
    order_id = int(callback.data.split('_')[1])
    logger.info(f'üì¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ö–æ—á–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑ ‚Ññ{order_id}')

    try:
        order = await crud.get_order(user_id, order_id)
    except OrderNotFound:
        await callback.message.answer(text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.') 
        return
    await callback.message.edit_text(text=order_text(order, order.items), reply_markup=kb.order_details_keyboard(order)) 


async def show_orders(msg: Message|CallbackQuery):
    user_id = msg.from_user.id
    orders = await crud.get_user_orders(user_id)
    text = '–í–æ—Ç –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã: ' if orders else '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∫–∞–∑–æ–≤'
    keyboard = kb.orders_keyboard(orders) if orders else None
    if isinstance(msg, Message):
        await msg.answer(text, reply_markup=keyboard)
    else:
        await msg.message.edit_text(text, reply_markup=keyboard)


@router.message(F.text.in_(['/orders', 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã']))
@handle_db_errors()
async def show_user_orders(message: Message):
    logger.info(f'üì¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /orders')
    await show_orders(message)


@router.callback_query(F.data == 'back_to_orders')
async def back_to_orders(callback: CallbackQuery):
    logger.info(f'üì¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤')
    await show_orders(callback)