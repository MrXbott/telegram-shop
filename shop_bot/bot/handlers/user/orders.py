from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List
import logging
import re

import keyboards.user_kb as kb
from db import crud, cart
from db.cart import ProductInCart
from utils.decorators import handle_db_errors
from utils.validators import is_valid_phone, normalize_phone, is_valid_name, is_valid_address
from texts import order_text
from exceptions.products import ProductOutOfStockError


logger = logging.getLogger(__name__)
router = Router()


class PlaceAnOrder(StatesGroup):
    waiting_for_address = State()
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_confirmation = State()


@router.callback_query(F.data == 'details_for_order')
async def add_order_details(callback: CallbackQuery, state: FSMContext):
    logger.info(f'üì¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑.')
    await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: \n–£–ª–∏—Ü—É, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ —ç—Ç–∞–∂:')
    await state.set_state(PlaceAnOrder.waiting_for_address)


@router.message(PlaceAnOrder.waiting_for_address)
async def add_order_address(message: Message, state: FSMContext):
    address = message.text.strip()
    if not is_valid_address(address):
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–¥—Ä–µ—Å–∞. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.')
        logger.warning(f'‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å: {message.text}.')
        return
    
    logger.info(f'‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∞–¥—Ä–µ—Å: {message.text}.')
    await state.update_data(address=address)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    await state.set_state(PlaceAnOrder.waiting_for_name)


@router.message(PlaceAnOrder.waiting_for_name)
async def add_order_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not is_valid_name(name):
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.')
        logger.warning(f'‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è: {message.text}.')
        return
    
    logger.info(f'‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∏–º—è: {message.text}.')
    await state.update_data(name=name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
    await state.set_state(PlaceAnOrder.waiting_for_phone)


@router.message(PlaceAnOrder.waiting_for_phone)
async def add_order_phone(message: Message, state: FSMContext):
    phone = message.text.strip()    
    if not is_valid_phone(phone):
        await message.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX')
        logger.warning(f'‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message.text}.')
        return
    
    await state.update_data(phone=normalize_phone(phone))
    logger.info(f'‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω: {message.text}.')
    data = await state.get_data()

    text = (
        f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n'
        f'üìç –ê–¥—Ä–µ—Å: {data['address']}\n'
        f'üë§ –ò–º—è: {data['name']}\n'
        f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n\n'
        f'–í—Å–µ –≤–µ—Ä–Ω–æ?'
    )
    await message.answer(text, reply_markup=kb.confirm_order_details_keyboard())
    await state.set_state(PlaceAnOrder.waiting_for_confirmation)


@router.callback_query(F.data == 'confirm_order')
@handle_db_errors()
async def place_an_order(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    user_id = callback.from_user.id

    # to do: check data 
    data = await state.get_data()
    products: List[ProductInCart] = await cart.get_cart(session, user_id)
    if not products:
        await callback.answer('‚ö†Ô∏èüõí –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑: –≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
        return
    
    try:
        order = await crud.create_order(session, user_id, data)
        await cart.clear_cart(user_id)
        await state.clear()
        await callback.message.edit_text(f'‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order.id} –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.')
        logger.info(f'‚úÖüì¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∞–∑ ‚Ññ{order.id}')
    except ProductOutOfStockError as e:
        await callback.message.answer('‚ö†Ô∏è–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
        logger.error(f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑: {e}', exc_info=True)
    except Exception as e:
        await callback.message.answer(f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        logger.error(f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}', exc_info=True)


@router.callback_query(F.data.startswith('order_'))
@handle_db_errors()
async def show_order(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    order_id = int(callback.data.split('_')[1])
    logger.info(f'üì¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ö–æ—á–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{order_id}')

    order = await crud.get_order(session, user_id, order_id)
    if order:
        await callback.message.edit_text(text=order_text(order, order.items), reply_markup=kb.order_keyboard()) 


async def show_orders(msg: Message|CallbackQuery, session: AsyncSession):
    user_id = msg.from_user.id
    orders = await crud.get_orders(session, user_id)
    text = '–í–æ—Ç –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã: ' if orders else '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∫–∞–∑–æ–≤'
    keyboard = kb.orders_keyboard(orders) if orders else None
    if isinstance(msg, Message):
        await msg.answer(text, reply_markup=keyboard)
    else:
        await msg.message.edit_text(text, reply_markup=keyboard)


@router.message(F.text.in_(['/orders', 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã']))
@handle_db_errors()
async def show_all_orders(message: Message, session: AsyncSession):
    logger.info(f'üì¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /orders')
    await show_orders(message, session)


@router.callback_query(F.data == 'back_to_orders')
async def back_to_orders(callback: CallbackQuery, session: AsyncSession):
    logger.info(f'üì¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤')
    await show_orders(callback, session)