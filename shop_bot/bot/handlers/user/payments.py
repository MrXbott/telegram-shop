from aiogram.types import Message, CallbackQuery, PreCheckoutQuery, SuccessfulPayment, LabeledPrice
from aiogram import Router, F
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.exc import SQLAlchemyError
import logging

from db import crud
from bot.keyboards import user_kb as kb
from bot.texts import successful_payment_text
from utils.decorators import handle_db_errors
from bot.services.invoices import send_order_invoice
from config import PROVIDER_TOKEN

logger = logging.getLogger(__name__)
router = Router()

@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_q: PreCheckoutQuery):
    await pre_checkout_q.answer(ok=True)

@router.message(F.successful_payment)
async def successful_payment_handler(message: Message):
    payment: SuccessfulPayment = message.successful_payment
    user_id = message.from_user.id

    try:
        order_id = int(payment.invoice_payload)
    except ValueError as e:
        logger.error(f'‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å payload –≤ order_id: {payment.invoice_payload}', exc_info=True)
        await message.answer('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.', reply_markup=kb.main_keyboard())
        return

    try:
        order = await crud.update_order_status(user_id, order_id, 'paid')
    except SQLAlchemyError as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ "paid" –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}', exc_info=True)
        await message.answer(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã. –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <b>{order_id}</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.', reply_markup=kb.main_keyboard())
        return
    except Exception as e:
        logger.error(f'‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ {order_id}: {e}', exc_info=True)
        await message.answer(f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <b>{order_id}</b>', reply_markup=kb.main_keyboard())
        return
    
    logger.info(f'‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ {order_id} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')
    await message.answer(text=successful_payment_text(payment, order), reply_markup=kb.main_keyboard())


@router.callback_query(F.data.startswith('pay_for_the_order_'))
@handle_db_errors()
async def pay_for_the_order(callback: CallbackQuery):
    user_id = callback.from_user.id
    order_id = int(callback.data.split('_')[-1])
    order = await crud.get_order(user_id, order_id)
    logger.info(f'üì¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ö–æ—á–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{order.id}.')

    await send_order_invoice(callback.bot, callback.message.chat.id, order, PROVIDER_TOKEN)
    